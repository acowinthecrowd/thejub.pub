ul(id="chat-navtabs", class="nav nav-tabs")
  li(id="chat-navtab-li", role="presentation")
    a(id="chat-navtab-a", href="#chat-tab", data-toggle='tab')
      i(id="chat-navtab-icon", class="material-icons",
        data-toggle="tooltip", title="Chat") chat_bubble
  li(id="jubbin-list-navtab-li", role="presentation", class="active")
    a(id="jubbin-list-navtab-a", href="#jubbin-list-tab", data-toggle='tab')
      i(class="material-icons", data-toggle="tooltip", title="Who's jubbin'") people
      div(id="num-users", class="right", style="margin-left:3px;") (0)
  li(id="chat-settings-navtab-li", role="presentation")
    a(id="chat-settings-navtab-a", href="#chat-settings-tab", data-toggle='tab')
      i(class="material-icons", data-toggle="tooltip", title="Chat settings") settings

div(id="chat-tab-content", class="tab-content")
  div(class="tab-pane active" id="chat-tab")
    ul(id="messages", class="jub-list")
  div(class="tab-pane active" id="jubbin-list-tab")
    div(id="jubbin-list")
      table
        tbody(id='jubbin-list-tbody')
  div(class="tab-pane active" id="chat-settings-tab")
    div(id='chat-settings-panel')
      div(class='panel-body')
        table
          tbody(id='chat-settings-tbody')
            unless loggedIn
              tr
                td
                  form(class='form-group', id='nickname-form', action='join-as-guest')
                    input(class='form-control', id='nickname-input',
                          placeholder='Nickname', autocomplete='off')
            if loggedIn
              tr
                td
                  input(id='show-chat-images', type='checkbox', action='')
                  label(id='show-chat-images-label', for='show-chat-images'
                  ) Show images from links in chat messages
              tr
                td
                  input(id='show-chat-animations', type='checkbox', action='')
                  label(id='show-chat-animations-label', for='show-chat-animations'
                  ) Show animations in chat window

              tr
                td
                  input(id='enable-mute-updates', type='checkbox', action='')
                  label(id='enable-mute-updates-label', for='enable-mute-updates'
                  ) Allow other jubs to see your mute status
            tr
              td
                a(href='https://github.com/aromatt/thejub.pub/issues',
                  target="_blank",
                  style="line-height:1.9; color: #9d9d9d; margin-left: 21px;"
                  ) GitHub issues

include username.jade

script.
  var scrolledUp = false;
  var currentUsers = {};

  // Basic regex that accepts a line that consists only of a URL
  var urlRegex = /^(http:\/\/|https:\/\/)?([a-z0-9][a-z0-9\-]*\.)+[a-z0-9][a-z0-9\-]*[^\s]*$/i;
  var imageRegex = /[^\s]+(\.(jpeg|jpg|png|gif|bmp))$/i;

  function unreadMessagesAlert(areUnread) {
    if (typeof areUnread === 'undefined') { areUnread = true; }
    if (areUnread) {
      $('#chat-navtab-icon').text('chat');
    } else {
      $('#chat-navtab-icon').text('chat_bubble');
    }
  }

  function drawCurrentUsers() {
    $("#num-users").text('(' + currentUsers.length + ')');
    $("#jubbin-list-tbody").empty();
    for (user of currentUsers) {
      var tr = $('<tr>').addClass('jub');
      tr.css({
        'color': user.color,
      });

      var jubMuteTd = $('<td>').addClass('jub-mute');
      var muteIcon = $('<span>').addClass('user-mute-icon');
      muteIcon.attr({
          class: 'glyphicon glyphicon-volume-off',
        });
      if(user.isMuted)
        muteIcon.css('visibility', 'visible');
      else
        muteIcon.css('visibility', 'hidden');
      jubMuteTd.append(muteIcon);

      var jubNameTd = $('<td>').addClass('jub-name');
      jubNameTd.text(user.name);

      var jubKarmaTd = $('<td>').addClass('jub-karma');
      jubKarmaTd.text(user.karma + " karma");

      tr.append(jubMuteTd);
      tr.append(jubNameTd);
      tr.append(jubKarmaTd);

      $("#jubbin-list-tbody").prepend(tr);
    }
  }

  $('#enable-mute-updates').on('change', function(e) {
    var data = { allowMuteStatus: this.checked };
    if(!this.checked)
      socket.emit('mute update', false);
    else
      socket.emit('mute update', player.isMuted());
    socket.emit('update user preferences', data);
  })

  $('#chat-navtabs a').click(function (e) {
    // Show it now so that we can do some polishing on the revealed element
    e.preventDefault();
    $(this).tab('show');

    // Depending on which tab we're opening, update certain UI elements
    if (e.currentTarget.id == 'jubbin-list-navtab-a') {
      drawCurrentUsers();
    } else {
      $('#messages').trigger('update_scroll');
      unreadMessagesAlert(false);
    }
  })

  // Message from server saying who's connected
  socket.on('users info', function(users) {
    currentUsers = users;
    drawCurrentUsers();
  });

  // Scroll chat to bottom if needed
  $('#messages').bind('update_scroll', function(event, callback) {
    if (!scrolledUp) {
      this.scrollTop = this.scrollHeight;
    }
    if (callback) { callback(); }
  });

  // Called whenever chat box is scrolled, including on window resizes
  // TODO put this on the same, slower timing as other resize functions
  $('#messages').scroll(function() {
    var elem = $( this );
    var maxHeight = parseInt(elem.css('max-height'), 10);
    scrolledUp = (Math.abs(this.scrollHeight - this.scrollTop - elem.height()) > 10);
    if (!scrolledUp) {
      unreadMessagesAlert(false);
    }
  });

  var makeLink = function(word) {
    var adjusted = word;
    if (!/^http/.test(word)) {
      adjusted = 'http://' + word;
    }
    var a = $( '<a>' ).attr({
      'class': 'a-link-to-the-past',
      'href': adjusted,
      'target': '_blank'
    });
    a.append(document.createTextNode(word));
    return a;
  }

  var makeImage = function(word) {
    var adjusted = word;
    if (!/^http/.test('http')) {
      adjusted = 'http://' + word;
    }
    var image = $( '<img>' ).attr({
      'src': adjusted
    });
    _.defer(function() {
      var elemMaxWidth = $('#messages > li');
      $( this ).css( 'width', (0.9 * elemMaxWidth.width()) + 'px' );
      $( this ).css( 'height', 'auto' );
    }.bind(image))
    return image;
  }

  var convertLineToElement = function(line, isMention){
    var elem = $('<span>');
    _.chain(line.split(' '))
     .map(function(word) {
       var transformedWord;
       var isLink = (urlRegex).test(word);
       if(isLink) {
         var isImage = (imageRegex).test( word );
         if ( isImage && #{loggedIn} && $('#show-chat-images').is(":checked") ) {
           transformedWord = makeImage( word );
         } else {
           transformedWord = makeLink( word );
         }
         transformedWord.text(transformedWord.text() + " ");
       } else {
         transformedWord = document.createTextNode(word + " ");
         if(isMention) {
           elem.css({
             'color': '#ad8aff',
             'font-weight': 'bold'
           });
         }
       }
       return transformedWord;
     })
    .each(function(component){
      elem.append(component);
    }).value();
    return elem;
  };

  var latestMsgVisible = function() {
    return $('#chat-navtab-li').attr('class') === 'active' && !scrolledUp;
  }

  var newChatLi = function(msgObj) {
    var li = $('<li>');

    // Emoting?
    if (!msgObj.emote) {
      // TODO move all styling into stylesheets
      var heading = $('<p>');
      heading.css({
        'margin-bottom': 0
      });

      // Start with the (bold) user name
      var user = $('<span>');
      user.css({
        'font-weight': 'bold',
        'color': msgObj.color,
        'float': 'left'
        });
      user.append(document.createTextNode(msgObj.user));
      heading.append(user);

      // Now add a timestamp TODO configurable format
      var time = $('<span>');
      time.css({
        'float': 'right',
        'color': '#666666'
      });
      var timeFormat = '%I:%M:%S %p'
      var msgTime = '';
      if (msgObj.hasOwnProperty('time')) {
        msgTime = strftime(timeFormat, new Date(msgObj.time));
      } else {
        msgTime = strftime(timeFormat);
      }
      time.append(document.createTextNode(msgTime));
      heading.append(time);

      // Append heading to chat message
      li.append(heading);

      if (msgObj.hasOwnProperty( 'customPanelBorder' )) {
        li.css('list-style-position', 'inside');
        li.css('border', '1px solid ' + msgObj.customPanelBorder);
        time.css('color', '#888899');
      }
    }
    return li;
  }

  var nextAnimId = function() {
    if (!this.hasOwnProperty('animId')) {
      this.animId = 0;
    }
    this.animId += 1;
    return this.animId;
  }

  var animateKarma = function(li, value) {
    var id = nextAnimId();
    var anim = $('<div class="karmaAnimation" id="' + id + '">');
    var color = value > 0 ? "#00DD11" : "#DD0011";
    var txt = (value > 0 ? "+" : "") + value;
    anim.css({
      position: 'absolute',
      height: 'auto', width: 'auto',
      padding: '2px 5px 2px 5px',
      color: color,
      fontWeight: 'bold',
      transparent: true,
      zIndex:9999,
      whiteSpace: 'nowrap',
      display: 'inline-block',
      animationDuration: '1s',
      animationIterationCount: 1,
      animationName: 'karma-float',
      animationFillMode: 'forwards',
      backgroundRepeat: 'no-repeat',
    });
    anim.text(txt);

    var wrap = $('<div>');
    wrap.css({
      position: 'relative',
      width: 0, height: 0,
      padding: 0, margin: 0,
      display: 'inline-block'
    });
    $(wrap).append(anim);
    $(li).append(wrap);

    setTimeout(function() { $("#" + id).remove(); }, 1000);
  };

  var appendMsgToLi = function(msgObj, li) {
    if (msgObj.emote) {
      var fullText = msgObj.user + ' ' + msgObj.text;
      li.append(li.append(document.createTextNode(fullText)));
      li.css({
        'font-style': 'italic',
        'color': msgObj.color
      });
    } else {
      _.each(msgObj.text.split('\n'), function(line) {
        li.append('<br>');
        li.append(convertLineToElement(line, msgObj.isMention));
      });
    }
  };

  // Chat message received from server
  socket.on('chat message', function(msgObj) {
    this.lastUser = this.lastUser || "";
    this.lastEmote = this.lastEmote || false;
    if (msgObj.text == undefined) return;
    msgObj.user = msgObj.user || '???';

    // Detect mentions and notify in title bar
    if (msgObj.text.includes(getUsername())) {
      if (!msgObj.isBot) {
        msgObj.isMention = true;
        if (!msgObj.history) {
          $.titleAlert(msgObj.user + ' says...', {
            requireBlur: true,
            duration: 0,
            interval: 700
          });
        }
      }
    }

    var list = $('#messages');
    var makeNewLi = false;
    if (msgObj.user != this.lastUser || msgObj.isBot || msgObj.emote ||
        this.lastEmote || this.lastColor != msgObj.color) {
      makeNewLi = true;
      this.lastEmote = msgObj.emote;
      this.lastUser = msgObj.user;
      this.lastColor = msgObj.color;
    }

    // Either create a new chat box or append the text to the latest one
    chatLi = makeNewLi ? newChatLi(msgObj) : list.find('li').last();
    appendMsgToLi(msgObj, chatLi);

    if (makeNewLi) {
      list.append(chatLi);
    }

    unreadMessagesAlert(!latestMsgVisible());
    $('#messages').trigger('update_scroll', [function() {
      // Show a fun animation upon resceiving karma
      ifLet(getIn(msgObj, ['karma', getUsername()]), function(val) {
        if (!msgObj.history && $('#show-chat-animations').is(":checked")) {
          animateKarma(chatLi, val);
        }
      });
    }]);
  });

  $('#show-chat-images').click(function (e) {
    var data = { showChatImages: this.checked };
    socket.emit('update user preferences', data);
  });

  $('#show-chat-animations').click(function (e) {
    var data = { showChatAnimations: this.checked };
    socket.emit('update user preferences', data);
  });

  // The chat is the correct initially-active tab; we loaded the page with the
  // jubbin-list active and now click over to chat as a workaround to make the
  // jubbin-list hide properly after page load. TODO what's the right way?
  $( document ).ready(function() {
    $('#chat-navtab-a').click();
  });

unless loggedIn
  script.
    $('#nickname-form').submit(function(e) {
      var guestData = {
        nickname: $('#nickname-input').val(),
      };
      $.post('/join-as-guest', guestData)
        .done(function(resultData) {
          if (resultData.success === true) {
            location.reload();
          } else {
            alert(resultData.errorMsg);
          }
        });
      e.preventDefault();
    });
