ul(id="chat-navtabs", class="nav nav-tabs")
  li(id="chat-navtab-li", role="presentation")
    a(id="chat-navtab-a", href="#chat-tab", data-toggle='tab')
      i(id="chat-navtab-icon", class="material-icons",
        data-toggle="tooltip", title="Chat") chat_bubble
  li(id="jubbin-list-navtab-li", role="presentation", class="active")
    a(id="jubbin-list-navtab-a", href="#jubbin-list-tab", data-toggle='tab')
      i(class="material-icons", data-toggle="tooltip", title="Who's jubbin") people
      div(id="num-users", class="right", style="margin-left:3px;") (0)
  li(id="chat-settings-navtab-li", role="presentation")
    a(id="chat-settings-navtab-a", href="#chat-settings-tab", data-toggle='tab')
      i(class="material-icons", data-toggle="tooltip", title="Chat settings") settings

div(id="chat-tab-content", class="tab-content")
  div(class="tab-pane active" id="chat-tab")
    ul(id="messages", class="jub-list")
  div(class="tab-pane active" id="jubbin-list-tab")
    ul(id="jubbin-list", class="jub-list")
  div(class="tab-pane active" id="chat-settings-tab")
    div(class='panel panel-default', id='chat-settings-panel')
      div(class='panel-body')
        form(class='form-group', id='username', action='')
          input(class='form-control', id='username-input', placeholder='Username', autocomplete='off')
        input(id='show-chat-images', type='checkbox', action='')
        label(id='show-chat-images-label', for='show-chat-images') Show images from links in chat messages

include ./username.jade

script.
  var scrolledUp = false;
  var currentUsers = {};

  // Basic regex that accepts a line that consists only of a URL
  var urlRegex = /^(http:\/\/|https:\/\/)?([a-z0-9][a-z0-9\-]*\.)+[a-z0-9][a-z0-9\-]*[^\s]*$/i;
  var imageRegex = /[^\s]+(\.(jpeg|jpg|png|gif|bmp))$/i;

  function unreadMessagesAlert(areUnread) {
    if (typeof areUnread === 'undefined') { areUnread = true; }
    if (areUnread) {
      $('#chat-navtab-icon').text('chat');
    } else {
      $('#chat-navtab-icon').text('chat_bubble');
    }
  }

  function drawCurrentUsers() {
    $("#num-users").text('(' + currentUsers.length + ')');
    $('#jubbin-list').empty();
    for (user of currentUsers) {
      $('#jubbin-list').append(
        $('<li>').text(user.name).css('color', user.color)
      );
    }
  }

  $('#chat-navtabs a').click(function (e) {
    // Show it now so that we can do some polishing on the revealed element
    e.preventDefault();
    $(this).tab('show');

    // Depending on which tab we're opening, update certain UI elements
    if (e.currentTarget.id == 'jubbin-list-navtab-a') {
      drawCurrentUsers();
    } else {
      $('#messages').trigger('update_scroll');
      unreadMessagesAlert(false);
    }
  })

  // Message from server saying who's connected
  socket.on('current users', function(users) {
    currentUsers = users;
    drawCurrentUsers();
  });

  // Scroll chat to bottom if needed
  $('#messages').bind('update_scroll', function() {
    if (!scrolledUp) {
      this.scrollTop = this.scrollHeight;
    }
  });

  // Called whenever chat box is scrolled, including on window resizes
  // TODO put this on the same, slower timing as other resize functions
  $('#messages').scroll(function() {
    var elem = $( this );
    var maxHeight = parseInt(elem.css('max-height'), 10);
    scrolledUp = (Math.abs(this.scrollHeight - this.scrollTop - elem.height()) > 10);
    if (!scrolledUp) {
      unreadMessagesAlert(false);
    }
  });

  var makeLink = function(line) {
    var adjusted = line;
    if(line.indexOf('http') !== 0) {
      adjusted = 'http://' + line;
    }
    var a = $( '<a>' ).attr({
      'class': 'a-link-to-the-past',
      'href': adjusted,
      'target': '_blank'
    });
    a.append(document.createTextNode(line));
    return a;
  }

  var makeImage = function(line) {
    var adjusted = line;
    if(line.indexOf('http') !== 0) {
      adjusted = 'http://' + line;
    }
    var image = $( '<img>' ).attr({
      'src': adjusted
    });
    _.defer(function() {
      var elemMaxWidth = $('#messages > li');
      $( this ).css( 'width', (0.9 * elemMaxWidth.width()) + 'px' );
      $( this ).css( 'height', 'auto' );
    }.bind(image))
    return image;
  }

  function convertLineToElement(line){
    var elem = $('<span>');
    _.chain(line.split(' ')).map(function(word) {
      var transformedWord;
      var isLink = (urlRegex).test(word);
      if(isLink) {
        var isImage = (imageRegex).test( word );
        if ( isImage && $('#show-chat-images').is(":checked") ) {
          transformedWord = makeImage( word );
        } else {
          transformedWord = makeLink( word );
        }
        transformedWord.text( transformedWord.text() + " " );
      } else {
        transformedWord = document.createTextNode( word + " ");
      }

      return transformedWord;
    }).each(function(component){
      elem.append(component);
    }).value();
    return elem;
  };

  var newChatLi = function(msgObj) {
    var li = $('<li>');

    // Emoting?
    if (msgObj.emote) {
      var fullText = msgObj.user + ' ' + msgObj.text;
      li.append(li.append(document.createTextNode(fullText)));
      li.css({
        'font-style': 'italic',
        'color': msgObj.color
      });
    } else {

      // TODO move all styling into stylesheets
      var heading = $('<p>');
      heading.css({
        'margin-bottom': 0
      });

      // Start with the (bold) user name
      var user = $('<span>');
      user.css({
        'font-weight': 'bold',
        'color': msgObj.color,
        'float': 'left'
        });
      user.append(document.createTextNode(msgObj.user));
      heading.append(user);

      // Now add a timestamp TODO configurable format
      var time = $('<span>');
      time.css({
        'float': 'right',
        'color': '#666666'
      });
      var timeFormat = '%I:%M:%S %p'
      var msgTime = '';
      if (msgObj.hasOwnProperty('time')) {
        msgTime = strftime(timeFormat, new Date(msgObj.time));
      } else {
        msgTime = strftime(timeFormat);
      }
      time.append(document.createTextNode(msgTime));
      heading.append(time);

      // Append heading to chat message
      li.append(heading);

      // Add each line of the message, with <br>'s in between
      _.each(msgObj.text.split('\n'), function(line) {
        li.append('<br>');
        li.append(convertLineToElement(line));
      } );
      if (msgObj.hasOwnProperty( 'customPanelBorder' )) {
        li.css('list-style-position', 'inside');
        li.css('border', '1px solid ' + msgObj.customPanelBorder);
        time.css('color', '#888899');
      }
    }
    return li;
  }

  // Chat message received from server
  socket.on('chat message', function(msgObj) {
    this.lastUser = this.lastUser || "";
    this.lastEmote = this.lastEmote || false;
    if (msgObj.text == undefined) return;
    msgObj.user = msgObj.user || '???';

    // Detect mentions and notify in title bar
    if (msgObj.text.indexOf(getUsername()) >= 0) {
      if (!msgObj.isBot) {
        $.titleAlert(msgObj.user + ' says...', {
          requireBlur: true,
          duration: 0,
          interval: 700
        });
      }
    }

    var list = $('#messages');
    var chatLi;
    if(msgObj.user != this.lastUser || msgObj.isBot || msgObj.emote
       || this.lastEmote || this.lastColor != msgObj.color) {
      this.lastEmote = msgObj.emote;
      this.lastUser = msgObj.user;
      this.lastColor = msgObj.color;
      chatLi = newChatLi(msgObj);
      list.append(chatLi);
    } else {
      chatLi = list.find('li').last()
      _.each(msgObj.text.split('\n'), function(line) {
        chatLi.append('<br>');
        chatLi.append(convertLineToElement(line));
      } );
    }
    if ($('#chat-navtab-li').attr('class') !== 'active' || scrolledUp) {
      unreadMessagesAlert(true);
    }
    $('#messages').trigger('update_scroll');
  });

  // Server responds on 'preferences' channel, handled by global.js
  $('#show-chat-images').click(function (e) {
    var data = { showChatImages: this.checked };
    socket.emit('update user preferences', getUsername(), data);
  });

  // The chat is the correct initially-active tab; we loaded the page with the
  // jubbin-list active and now click over to chat as a workaround to make the
  // jubbin-list hide properly after page load. TODO what's the right way?
  $( document ).ready(function() {
    $('#chat-navtab-a').click();
  });
