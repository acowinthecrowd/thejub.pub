ul(id="messages", class="jub-list")
div(class='row')
  form(class='form-inline', id='chat', action='')
    div(class='col-md-10')
      input(class='form-control', id='chat-input',
            style='width: 100%;', autocomplete='off')
    div(class='col-md-2')
      button(class='btn btn-default') Send

script.

  var save_color = function(color) {
    var expiration_date = new Date();
    expiration_date.setFullYear(expiration_date.getFullYear() + 1);
    document.cookie = 'username_color=' + color + '; ' +
                      'expires=' + expiration_date.toGMTString();
  }

  var new_chat_li = function(msg_obj) {
    var li = $('<li>');

    // Emoting?
    if (msg_obj.emote) {
      var full_text = msg_obj.user + ' ' + msg_obj.text;
      li.append(li.append(document.createTextNode(full_text)));
      li.css({
        'font-style': 'italic',
        'color': msg_obj.color
      });
    } else {

      // Start with the (bold) user name)
      var user_b = $('<b>');
      user_b.css('color', msg_obj.color);
      user_b.append(document.createTextNode(msg_obj.user));
      li.append(user_b);

      // Add each line of the message, with <br>'s in between
      for (line of msg_obj.text.split('\n')) {
        console.log(line);
        li.append('<br>');
        li.append(document.createTextNode(line));
      }
    }
    return li;
  }

  // Client chat message submission
  $('#chat').submit(function() {
    var msg = $('#chat-input').val();
    var username = get_cookie('username');
    if (username == '') {
      alert('You must be logged in to chat.')
    } else {
      socket.emit('chat message', {
        user: username,
        text: msg
      });
    }
    $('#chat-input').val('');
    return false;
  });


  // Chat message received from server
  socket.on('chat message', function(msg_obj) {
    if (msg_obj.text == undefined) {
      return;
    }
    msg_obj.user = msg_obj.user || 'someone';

    // Detect mentions and notify in title bar
    if (msg_obj.text.indexOf(get_username()) >= 0) {
      if (!msg_obj.is_bot) {
        $.titleAlert(msg_obj.user + ' says...', {
          requireBlur: true,
          duration: 0,
          interval: 700
        });
      }
    }

    // Though the client can request a color, the server is the authority on
    // color; save our assigned color as a cookie so that we can remind the
    // server of it next time.
    // TODO this should absolutely be saved on the server
    if (msg_obj.color && msg_obj.user == get_username()) {
      save_color(msg_obj.color);
    }

    console.log('received chat', msg_obj);
    var list = $('#messages');

    // Before appending, note the height of the history.
    var old_y = list.height();
    var max_y = parseInt(list.css('max-height'), 10);
    var at_bottom = (Math.abs(list[0].scrollHeight - list[0].scrollTop - max_y) < 10);
    console.log(list[0].scrollTop, list[0].scrollHeight, old_y, max_y, at_bottom);

    var chat_li = new_chat_li(msg_obj);

    list.append(chat_li);
    var new_y = list.height();

    // If the chat box is newly scrolling or we were already scrolled to the
    // bottom, scroll to the bottom
    if ((old_y < max_y) && (new_y >= max_y) || at_bottom) {
      list[0].scrollTop = list[0].scrollHeight;
    }
  });

  // Load the username color cookie and send a message to the server's chat
  // module indicating the color choice.
  $( document ).ready(function() {
    var color = get_cookie('username_color');
    var username = get_cookie('username');
    if (color && username) {
      socket.emit('chat message', {
        user: username,
        text: '/color ' + color
      })
    }
  });

