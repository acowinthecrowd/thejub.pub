ul(id="chat-navtabs", class="nav nav-tabs")
  li(id="chat-navtab-li", role="presentation")
    a(id="chat-navtab-a", href="#chat-tab", data-toggle='tab') Chat
  li(id="jubbin-list-navtab-li", role="presentation", class="active")
    a(id="jubbin-list-navtab-a", href="#jubbin-list-tab", data-toggle='tab') Who's jubbin'
div(id="chat-tab-content", class="tab-content")
  div(class="tab-pane active" id="chat-tab")
    ul(id="messages", class="jub-list")
  div(class="tab-pane active" id="jubbin-list-tab")
    ul(id="jubbin-list", class="jub-list")

script.

  var scrolled_up = false;
  var current_users = {};
  var urlRegex = /(http\:\/\/|https\:\/\/)?([a-z0-9][a-z0-9\-]*\.)+[a-z0-9][a-z0-9\-]*/i;

  $('#chat-navtabs a').click(function (e) {
    // Show it now so that we can do some polishing on the revealed element
    e.preventDefault();
    $(this).tab('show');

    // Depending on which tab we're opening, update certain UI elements
    if (e.currentTarget.id == 'jubbin-list-navtab-a') {
      $('#jubbin-list').empty();
      for (user of current_users) {
        $('#jubbin-list').append(
          $('<li>').text(user.name).css('color', user.color)
        );
      }
    } else {
      $('#messages').trigger('update_scroll');
    }
  })

  // Message from server saying who's connected
  socket.on('current users', function(users) {
    current_users = users;
  });

  // Scroll chat to bottom if needed
  $('#messages').bind('update_scroll', function() {
    if (!scrolled_up) {
      this.scrollTop = this.scrollHeight;
    }
  });

  // Called whenever chat box is scrolled, including on window resizes
  // TODO put this on the same, slower timing as other resize functions
  $('#messages').scroll(function() {
    var elem = $( this );
    var max_height = parseInt(elem.css('max-height'), 10);
    scrolled_up = (Math.abs(this.scrollHeight - this.scrollTop - elem.height()) > 10);
  });
  var makeLink = function(line) {
    var a = $( '<a>' ).on( 'click', function( event ) {
      event.preventDefault();
      var adjusted = line;
      if(line.indexOf('http') !== 0) {
        adjusted = 'http://' + line;
      }
      window.open( adjusted, '_blank' );
    } );
    a.append(line);
    return a;
  }
  var new_chat_li = function(msg_obj) {
    var li = $('<li>');

    // Emoting?
    if (msg_obj.emote) {
      var full_text = msg_obj.user + ' ' + msg_obj.text;
      li.append(li.append(document.createTextNode(full_text)));
      li.css({
        'font-style': 'italic',
        'color': msg_obj.color
      });
    } else {

      // TODO move all styling into stylesheets
      var heading = $('<p>');
      heading.css({
        'margin-bottom': 0
      });

      // Start with the (bold) user name
      var user = $('<span>');
      user.css({
        'font-weight': 'bold',
        'color': msg_obj.color,
        'float': 'left'
        });
      user.append(document.createTextNode(msg_obj.user));
      heading.append(user);

      // Now add a timestamp TODO configurable format
      var time = $('<span>');
      time.css({
        'float': 'right',
        'color': '#666666'
      });
      time.append(document.createTextNode(strftime('%I:%M:%S %p')));
      heading.append(time);

      // Append heading to chat message
      li.append(heading);

      // Add each line of the message, with <br>'s in between
      for (line of msg_obj.text.split('\n')) {
        li.append('<br>');
        var isLink = (urlRegex).test(line);
        if(isLink) {
          li.append(makeLink(line));
        } else {
          li.append( document.createTextNode( line ) );
        }
      }

    }
    return li;
  }

  // Chat message received from server
  socket.on('chat message', function(msg_obj) {
    this.last_user = this.last_user || "";
    this.last_emote = this.last_emote || false;

    if (msg_obj.text == undefined) {
      return;
    }
    msg_obj.user = msg_obj.user || '???';

    // Detect mentions and notify in title bar
    if (msg_obj.text.indexOf(get_username()) >= 0) {
      if (!msg_obj.is_bot) {
        $.titleAlert(msg_obj.user + ' says...', {
          requireBlur: true,
          duration: 0,
          interval: 700
        });
      }
    }

    var list = $('#messages');
    if(msg_obj.user != this.last_user || msg_obj.is_bot ||
       msg_obj.emote || this.last_emote) {
      this.last_emote = msg_obj.emote;
      this.last_user = msg_obj.user;
      var chat_li = new_chat_li(msg_obj);
      list.append(chat_li);
    } else {
      for (line of msg_obj.text.split('\n')) {
        list.find('li').last().append('<br>');
        var isLink = (urlRegex).test(line);
        if(isLink) {
          list.find( 'li' ).last().append(makeLink(line));
        } else {
          list.find( 'li' ).last().append( document.createTextNode( line ) );
        }
      }
    }

    $('#messages').trigger('update_scroll');
  });

  // The chat is the correct initially-active tab; we loaded the page with the
  // jubbin-list active and now click over to chat as a workaround to make the
  // jubbin-list hide properly after page load. TODO what's the right way?
  $( document ).ready(function() {
    $('#chat-navtab-a').click();
  });
