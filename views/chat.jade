ul(id="messages", class="jub-list")

script.
  var last_user = "";

  var scrolled_up = false;

  // Scroll chat to bottom if needed
  $('#messages').bind('update_scroll',function() {
    if (!scrolled_up) {
      this.scrollTop = this.scrollHeight;
    }
  });

  // Called whenever chat box is scrolled, including on window resizes
  $('#messages').scroll(function() {
    var elem = $( this );
    var max_height = parseInt(elem.css('max-height'), 10);
    scrolled_up = (Math.abs(this.scrollHeight - this.scrollTop - elem.height()) > 10);
  });

  var save_color = function(color) {
    var expiration_date = new Date();
    expiration_date.setFullYear(expiration_date.getFullYear() + 1);
    document.cookie = 'username_color=' + color + '; ' +
                      'expires=' + expiration_date.toGMTString();
  }

  var new_chat_li = function(msg_obj) {
    var li = $('<li>');

    // Emoting?
    if (msg_obj.emote) {
      var full_text = msg_obj.user + ' ' + msg_obj.text;
      li.append(li.append(document.createTextNode(full_text)));
      li.css({
        'font-style': 'italic',
        'color': msg_obj.color
      });
    } else {

      // TODO move all styling into stylesheets
      var heading = $('<p>');
      heading.css({
        'margin-bottom': 0
      });

      // Start with the (bold) user name
      var user = $('<span>');
      user.css({
        'font-weight': 'bold',
        'color': msg_obj.color,
        'float': 'left'
        });
      user.append(document.createTextNode(msg_obj.user));
      heading.append(user);

      // Now add a timestamp TODO configurable format
      var time = $('<span>');
      time.css({
        'float': 'right',
        'color': '#666666'
      });
      time.append(document.createTextNode(strftime('%I:%M:%S %p')));
      heading.append(time);

      // Append heading to chat message
      li.append(heading);

      // Add each line of the message, with <br>'s in between
      for (line of msg_obj.text.split('\n')) {
        li.append('<br>');
        li.append(document.createTextNode(line));
      }
    }
    return li;
  }

  // Chat message received from server
  socket.on('chat message', function(msg_obj) {
    if (msg_obj.text == undefined) {
      return;
    }
    msg_obj.user = msg_obj.user || 'someone';

    // Detect mentions and notify in title bar
    if (msg_obj.text.indexOf(get_username()) >= 0) {
      if (!msg_obj.is_bot) {
        $.titleAlert(msg_obj.user + ' says...', {
          requireBlur: true,
          duration: 0,
          interval: 700
        });
      }
    }

    // Though the client can request a color, the server is the authority on
    // color; save our assigned color as a cookie so that we can remind the
    // server of it next time.
    // TODO this should absolutely be saved on the server
    if (msg_obj.color && msg_obj.user == get_username()) {
      save_color(msg_obj.color);
    }

    console.log('received chat', msg_obj);
    var list = $('#messages');
    if(msg_obj.user != last_user || msg_obj.is_bot) {
      last_user = msg_obj.user;
      var chat_li = new_chat_li(msg_obj);
      list.append(chat_li);
    } else {
      for (line of msg_obj.text.split('\n')) {
        list.find('li').last().append('<br>');
        list.find('li').last().append(document.createTextNode(line));
      }
    }
    var new_y = list.height();

    $('#messages').trigger('update_scroll');
  });

  // Load the username color cookie and send a message to the server's chat
  // module indicating the color choice.
  $( document ).ready(function() {
    var color = get_cookie('username_color');
    var username = get_cookie('username');
    if (color && username) {
      socket.emit('chat message', {
        user: username,
        text: '/color ' + color
      })
    }
  });
