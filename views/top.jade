nav(class='navbar navbar-inverse navbar-fixed-top' id='top-nav')
  form(class='navbar-form form-group navbar-left',
       id='load_video', action='')

    div(class='input-group input-group-md')
      span(class='input-group-btn jub-nav-top-item')
        button(class='btn btn-default', type='button', id='join-dj',
               data-toggle='tooltip', data-placement='top',
               title='Click to DJ')
          span(id='join-dj-icon', class='glyphicon glyphicon-user')
      input(class='form-control jub-nav-input jub-nav-top-item', id='omnibox',
            style='width:300px; margin-right:10px; margin-left:5px;',
            placeholder='Search / video or playlist ID / URL')

  ul(class='nav navbar-nav navbar-right')
    // Username
    li(class='jub-nav-top-item')
      form(class='navbar-form form-group', id='auth', action='')
        input(class='form-control jub-nav-input jub-nav-top-item', id='username',
              style='margin:0 50px 10px 0;',
              placeholder='User name', autocomplete='off')
    // Title
    li
      p(class='navbar-text', id='title', style='font-size:36px;')= title


include ./username.jade

script.

  var MAX_RESULTS = 7;
  var MAX_PRETTY_LEN = 60;
  var djing = false;

  function drawDjState() {
    var elem = $('#join-dj');
    if (djing) {
      elem.css('background', '#2DB85A');
      elem.css('color', '#000');
      $('#join-dj-icon').attr('class', 'glyphicon glyphicon-headphones');
      $('#join-dj').attr('title', 'Stop DJing');
    } else {
      elem.css('background', '#3F2C52');
      elem.css('color', '#FFFFFF');
      $('#join-dj-icon').attr('class', 'glyphicon glyphicon-user');
      $('#join-dj').attr('title', 'Click to DJ');
    }
  }

  // e.g. "michelleheafy: Some cool video about someth..."
  function prettifyResult(result) {
    var artist = result.snippet.channelTitle
    var pretty = artist + ": " + result.snippet.title;
    if (pretty.length > MAX_PRETTY_LEN) {
      pretty = pretty.slice(0, MAX_PRETTY_LEN - 3) + "...";
    }
    return pretty
  }

  // Take in youtube search result items and turn them into an array of objects
  // that autocomplete can handle, truncating the list in the process
  function transformSearchResults(results) {
    return results.slice(0, MAX_RESULTS).map(function(result) {
      return {
        label: prettifyResult(result),
        value: result.id.videoId
      }
    });
  }

  $('#omnibox').autocomplete({
    // Request a video search; once the results come back, update the UI
    source: function(request, response) {
      console.log('searching for', request.term);
      youtubeVideoSearch(request.term, function(items) {
        response(transformSearchResults(items));
      })
    },

    // Don't change the value of the search box while user is choosing
    focus: function(event, ui) {
      return false;
    },

    // When a user chooses a suggestion (hits enter) start the video
    select: function(event, ui) {
      var event = $.Event("submit");
      event.videoId = ui.item.value;
      $('#load_video').trigger(event);
      return false;
    },
    minLength: 5,
    delay: 300,
  });

  // Client text box for submitting a video
  $('#load_video').submit(function(event) {
    // We might have been invoked straight from an autocomplete callback,
    // in which case the value of the search box is not the video id; the
    // video id was passed in with the event.
    var id = event.videoId;
    var user = getCookie('username');
    var plName = selectedPlaylistName();
    if (!plName) {
      console.error('no playlist selected (this should never happen)');
      return;
    }

    // We were invoked via a normal form submit
    if (id == undefined) {
      id = $('#omnibox').val();
    }

    // Accept video URLs
    if (id.startsWith('https:\/\/www.youtube.com')) {
      console.log('user entered url');
      // TODO do we have regex?
      if (id.indexOf('youtube.com\/watch') > 0) {
        console.log('user entered video');
        id = id.split('watch?v=')[1];
      } else if (id.indexOf('youtube.com\/playlist') > 0) {
        console.log('user entered playlist');
        id = id.split('playlist?list=')[1];
      }
    }

    // We've obtained the ID (either a playlist or video ID)
    if (id.length > 11) {
      var count = 0;
      var done = false;
      $('#omnibox').val('');
      var waitForPlaylist = function() {
        if (!done) {
          $('#omnibox').val($('#omnibox').val() + '.');
          setTimeout(waitForPlaylist, 300);
        }
      }
      setTimeout(waitForPlaylist, 300);
      youtubePlaylist(id, function(videoList) {
        done = true;
        for (video of videoList) {
          video.user = user;
          youtubeVideoSpecs(video, function(obj) {
            if (!(obj.title && obj.duration && user)) {
              console.log('failed to find info for video', video.id);
            }
            count += 1;
          });
        }

        // Periodically see if we're done fetching info for all the videos.
        // Once we are, sort them and update the client's queue.
        var waitForSpecs = function() {
          if (count == videoList.length) {
            console.log('yay! done fetching all video infos. sorting...');

            // Sort by 'position', in place
            videoList.sort(function(a, b) {
              if (a.position <= b.position) { return -1; } else { return 1; }
            });
            console.log('emitting to videos enqueue');
            socket.emit('videos enqueue', user, plName, videoList);
            $('#omnibox').val('');
          } else {
            $('#omnibox').val($('#omnibox').val() + '.');
            setTimeout(waitForSpecs, 300);
          }
        }
        waitForSpecs();
      });
    } else {
      // Not a playlist; it's a video. Submit it.
      var videoObj = {
        user: getCookie('username'),
        id: id
      }
      youtubeVideoSpecs(videoObj, function(resultObj) {
        if (resultObj.title && resultObj.duration) {
          console.log('submitting video', resultObj);
          socket.emit('video enqueue', user, plName, resultObj);
          $('#omnibox').val('');
        } else {
          console.log('failed to find info for video', resultObj.id);
        }
      });
    }
    return false;
  });

  // DJ button
  $('#join-dj').on('click', function() {
    if (!djing) {
      socket.emit('add dj', getUsername());
      console.log("add dj");
      djing = true;
    } else {
      socket.emit('remove dj', getUsername());
      console.log("remove dj");
      djing = false;
    }
    drawDjState();
  });

  // Some other part of the page wants to set the DJ state
  $('#join-dj').on('set-dj-state', function(e, newState) {
    console.log('dj-state', newState);
    djing = newState;
    drawDjState();
  });

  // Server assigns 'djing' state
  socket.on('user djing', function(state) {
    $('#join-dj').trigger('set-dj-state', state);
  });
