div(class='panel panel-default', id='player-panel')
  table(class='table', id='player-banner')
  div(class='panel-body')
    div(id='player', style="z-index: 1;")
    div(id='player-shield', style="z-index: 2;")
      span(id='player-hidden-splash', class='glyphicon glyphicon-sunglasses')
  table(class='table', id='player-footer')
    tbody
      tr
        th(id='like-dislike-th')
          div(class='input-group input-group-md')
            button(class='btn btn-default', type='button', id='like-btn',
                   data-toggle='tooltip', data-placement='top',
                   title='Hoot!')
              span(id='like-icon', class='glyphicon glyphicon-star')
              span(id='num-likes', style='margin-left: 4px;') 0
              //button(class='btn btn-default', type='button', id='dislike-btn',
              //       data-toggle='tooltip', data-placement='top',
              //       title='K.')
              //  span(id='dislike-icon', class='glyphicon glyphicon-thumbs-down')
              //  span(id='num-dislikes', style='margin-left: 4px;') 0
            button(class='btn btn-default right',type='button',
                   id='skip', data-toggle='tooltip',
                   data-placement='bottom', title='Skip')
              span(id='skip-icon', class='glyphicon glyphicon-fast-forward')
        th(id='player-buttons-th', class='right')
          div(class='input-group input-group-md')
            button(class='btn btn-default',type='button',
                   id='mute', data-toggle='tooltip',
                   data-placement='bottom', title='Mute')
              span(id='mute-icon', class='glyphicon glyphicon-volume-up')
            button(class='btn btn-default',type='button',
                   id='hide-video', data-toggle='tooltip',
                   data-placement='bottom', title='Hide video')
              span(id='hide-video-icon', class='glyphicon glyphicon-eye-open')

script.

  var playerReady = false;
  var myVideoState = {};

  var PLAYER_STATE = {
    //-1: 'unstarted',
    0: 'ended',
    1: 'playing',
    2: 'paused',
    3: 'buffering',
    5: 'video cued',
  }

  // Skip
  $('#skip').on('click', function(e) {
    var user = getCookie('username');
    socket.emit('video skip', user);
    return false;
  });

  function drawMuteState() {
    var isMuted = getCookie('muted');
    if (isMuted == 1) {
      $('#mute-icon').attr('class', 'glyphicon glyphicon-volume-off');
      $('#mute').attr('title', 'Unmute');
    } else {
      $('#mute-icon').attr('class', 'glyphicon glyphicon-volume-up');
      $('#mute').attr('title', 'Mute');
    }
  }

  function drawHideVideoState() {
    // Use the cookie because when it transitions, it uses a fade effect
    if (getCookie('hide-video') == 1) {
      $('#hide-video-icon').attr('class', 'glyphicon glyphicon-eye-close');
      $('#hide-video').attr('title', 'Show video');
    } else {
      $('#hide-video-icon').attr('class', 'glyphicon glyphicon-eye-open');
      $('#hide-video').attr('title', 'Hide video');
    }
  }

  // Reads cookie and applies its setting
  function loadHideVideoState() {
    var hidden = (getCookie('hide-video') == 1);
    setPlayerVisible(!hidden, 0);
    drawHideVideoState();
  }

  //TODO: load the controls and player in a deliberate order so one
  // can reflect the other's mute state
  $( document ).ready(function() {
    drawMuteState();
    loadHideVideoState();
  });

  // Mute button
  $('#mute').on('click', function(e) {
    e.preventDefault();
    if (player.isMuted()) {
      player.unMute();
      setCookie('muted', 0);
    } else {
      player.mute();
      setCookie('muted', 1);
    }
    drawMuteState();
    return false;
  });

  function getPlayerShieldUp() {
    return $('#player-shield').css('display') !== 'none';
  }

  function setPlayerVisible(visible, fadeDuration) {
    if (typeof visible === 'undefined') { visible = true; }
    if (visible) {
      $('#player-shield').fadeOut(fadeDuration);
    } else {
      $('#player-shield').fadeIn(fadeDuration);
    }
  }

  // Hide video button - toggle player visibility and save new setting
  $('#hide-video').on('click', function(e) {
    e.preventDefault();
    var newHideState = !getPlayerShieldUp(); // Toggle it
    setPlayerVisible(!newHideState, 100);
    setCookie('hide-video', newHideState ? 1 : 0);
    drawHideVideoState();
    return false;
  });

  // Later, use this to make avatars dance
  function updateOpinions(opinions) {
    var likes = 0, dislikes = 0;
    if (opinions) {
      for (v of opinions) {
        if (v)
          likes += 1;
        else
          dislikes += 1;
      }
    }
    $('#num-likes').text(likes);
    $('#num-dislikes').text(dislikes);
  }

  socket.on('num likes', function(num) {
    $('#num-likes').text(num);
  });

  socket.on('num dislikes', function(num) {
    $('#num-dislikes').text(num);
  });

  // Like
  $('#like-btn').on('click', function(e) {
    socket.emit('like', getUsername());
    return false;
  });

  // Dislike
  $('#dislike-btn').on('click', function(e) {
    socket.emit('dislike', getUsername());
    return false;
  });

  // Start the specified video, starting at the correct time
  function applyVideoState(state) {
    if (!playerReady)
      return;
    if (Object.keys(state) == 0)
      return;
    var id = state.id;
    var startTime = state.startTime;
    var user = state.user;
    if (myVideoState.id != id ||
        myVideoState.startTime != startTime) {
      myVideoState = {
        title: state.title,
        duration: state.duration,
        userColor: state.userColor,
        user: user,
        id: id,
        startTime: startTime,
      };
      var videoProgress = (state.serverTime - startTime) / 1000;
      console.log("apply video state", id, videoProgress);
      if ((typeof id == 'string') && (typeof videoProgress == 'number')) {
        console.log('loading video');
        player.loadVideoById({
          'videoId': id,
          'startSeconds': videoProgress,
          'suggestedQuality': 'large'
        });
      } else {
        player.stopVideo();
      }
      updateTimeLeft();
      updateCurrentDj(state.user, state.userColor);
      updateCurrentTrack(state.title);
      updateOpinions(state.opinions);
    }
  }

  // Server tells us about video state changes
  socket.on('video state', function(videoState) {
    applyVideoState(videoState);
  });

  // Everything below here is boilerplate for the Google YT IFrame
  //

  // Load the IFrame Player API code, asynchronously
  var tag = document.createElement('script');
  tag.src = "https://www.youtube.com/iframe_api";
  var firstScriptTag = document.getElementsByTagName('script')[0];
  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

  // Create an <iframe> (and YouTube player) after the API code downloads.
  var player;
  function onYouTubeIframeAPIReady() {
    player = new YT.Player('player', {
      height: 290,
      width: 484,
      playerVars: {
        autoplay: 0,
        autohide: 1,
        controls: 0,
        rel: 0,
        disablekb: 1,
        modestbranding: 1,
        wmode: 'opaque',
        // TODO add 'origin' param; set it to my domain
        iv_load_policy: 0
      },
      events: {
        'onReady': onPlayerReady,
        'onStateChange': onPlayerStateChange
      }
    });
  }

  // The API will call this function when the video player is ready.
  function onPlayerReady(event) {
    var isMuted = getCookie('muted');
    if(isMuted == 1) {
      player.mute();
    }
    else {
      player.unMute();
    }
    playerReady = true;
    socket.emit('video state');
    refreshSizes(true);
  }

  // The API calls this function when the player's state changes.
  // The function indicates that when playing a video (state=1),
  // the player should play for six seconds and then stop.
  var done = false;
  function onPlayerStateChange(event) {
    console.log('player state change to', event.data, PLAYER_STATE[event.data]);
    if (event.data == YT.PlayerState.PAUSED) {
      // TODO does this violate the youtube ToS?
      event.target.playVideo();
    } else if (event.data == YT.PlayerState.ENDED) {
      player.clearVideo();
    } else if (event.data == YT.PlayerState.PLAYING) {
      if (!myVideoState.id) {
        player.stopVideo();
      }
    }
  }


