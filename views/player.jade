div(class='panel panel-default', id='player-panel')
  table(class='table', id='player-banner')
    tbody
      tr
        th(id='current-dj-name')
        th(id='current-track') No one is playing.
        th(id='time-left')
  div(class='panel-body')
    div(id='player')
  //div(class='panel-footer' id='player-footer') No videos queued. TODO

script.

  var player_ready = false;
  var my_video_state = {};

  // Start the specified video, starting at the correct time
  function apply_video_state(state) {
    if (!player_ready)
      return;
    if (Object.keys(state) == 0)
      return;
    var id = state.id;
    var start_time = state.start_time;
    var user = state.user;
    if (my_video_state.id != id ||
        my_video_state.start_time != start_time) {
      my_video_state = {
        title: state.title,
        duration: state.duration,
        user_color: state.user_color,
        user: user,
        id: id,
        start_time: start_time,
      };
      var video_progress = (state.server_time - start_time) / 1000;
      console.log("apply video state", id, video_progress);
      player.loadVideoById({
        'videoId': id,
        'startSeconds': video_progress,
        'suggestedQuality': 'large'
      });
      update_time_left();
      update_current_dj(state.user, state.user_color);
      update_current_track(state.title);
    }
  }

  // Server tells us about video state changes
  socket.on('video state', function(video_state) {
    apply_video_state(video_state);
  });

  function update_current_track(title) {
    var track = $('#current-track');
    track.text(my_video_state.title);
    var width = $('#player-panel-heading').width() -
                parseInt($('#player-panel-heading').css('padding-right'), 10) -
                parseInt($('#player-panel-heading').css('padding-left'), 10) -
                $('#current-dj-name').outerWidth() -
                $('#time-left').outerWidth();
    console.log('truncating to width', width);
    track.truncate({
        width: 'auto',
        token: '...',
        side: 'right',
        multiline: false
    });
  }

  function update_current_dj(user, color) {
    var dj = $('#current-dj-name');
    if (user) {
      dj.css({
        'font-weight': 'bold',
        'float': 'left'
      });
      if (color) {
        dj.css({'color': color})
      }
      dj.text(user);
      dj.truncate({
        width: '100px',
        token: '...',
        side: 'right',
        multiline: false
      });
    }
  }

  function update_time_left() {
    this.time = new Date(1970, 1, 1); // Unix epoch
    var elem = $('#time-left');
    var hide = false;
    var seconds_left = player.getDuration() - player.getCurrentTime();
    if (player_ready) {
      if (player.getDuration() > 0 && player.getCurrentTime() > 0) {
        this.time.setSeconds(seconds_left);
      } else {
        this.time.setSeconds(0);
        hide = true;
      }
    } else {
      hide = false;
    }
    var format = seconds_left >= 3600 ? '%k:%M:%S' : '%M:%S';
    elem.text(strftime(format, this.time));
    if (hide) {
      elem.css('visibility','hidden')
    } else {
      elem.css('visibility','visible')
    }
  }
  setInterval(update_time_left, 1000);

  /* Everything below here is boilerplate for the Google YT IFrame */

  // Load the IFrame Player API code, asynchronously
  var tag = document.createElement('script');
  tag.src = "https://www.youtube.com/iframe_api";
  var firstScriptTag = document.getElementsByTagName('script')[0];
  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

  // Create an <iframe> (and YouTube player) after the API code downloads.
  var player;
  function onYouTubeIframeAPIReady() {
    player = new YT.Player('player', {
      height: '290',
      width: '484',
      playerVars: {
        'autoplay': 0,
        'autohide': 1,
        'controls': 0,
        'rel': 0,
        'disablekb': 1,
        'modestbranding': 1,
        // TODO add 'origin' param; set it to my domain
        'iv_load_policy': 0
      },
      events: {
        'onReady': onPlayerReady,
        'onStateChange': onPlayerStateChange
      }
    });
  }

  // The API will call this function when the video player is ready.
  function onPlayerReady(event) {
    var is_muted = get_cookie('muted');
    if(is_muted == 1) {
      console.log('is muted');
      player.mute();
    }
    else {
      console.log('is not muted');
      player.unMute();
    }
    player_ready = true;
    socket.emit('video state', 0);
    refresh_sizes(true);
  }

  // The API calls this function when the player's state changes.
  // The function indicates that when playing a video (state=1),
  // the player should play for six seconds and then stop.
  var done = false;
  function onPlayerStateChange(event) {
    console.log("player state change:", event.data)
    if (event.data == YT.PlayerState.PAUSED) {
      event.target.playVideo(); // TODO does this violate the youtube ToS?
    }
  }


