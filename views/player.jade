div(id='player', class='flex-centered')

script.

  var my_video_state = {};

  // Start the specified video, starting at the correct time
  function apply_video_state(state) {
    id = state['id'];
    start_time = state['start_time'];
    user = state['user'];
    if (my_video_state['id'] != id ||
        my_video_state['start_time'] != start_time) {
      my_video_state = {
        user: user,
        id: id,
        start_time: start_time
      };
      video_progress = (state['server_time'] - start_time) / 1000;
      console.log("apply video state", id, video_progress);
      player.loadVideoById({
        'videoId': id,
        'startSeconds': video_progress,
        'suggestedQuality': 'large'
      });
    }
  }

  // Server tells us about video state changes
  socket.on('video state', function(video_state) {
    apply_video_state(video_state);
  });

  /* Everything below here is boilerplate for the Google YT IFrame */

  // Load the IFrame Player API code, asynchronously
  var tag = document.createElement('script');
  tag.src = "https://www.youtube.com/iframe_api";
  var firstScriptTag = document.getElementsByTagName('script')[0];
  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

  // Create an <iframe> (and YouTube player) after the API code downloads.
  var player;
  function onYouTubeIframeAPIReady() {
    player = new YT.Player('player', {
      height: '320',
      width: '525',
      playerVars: {
        'autoplay': 0,
        'autohide': 1,
        'controls': 0,
        'rel': 0,
        'disablekb': 1,
        'modestbranding': 1,
        // TODO add 'origin' param; set it to my domain
        'iv_load_policy': 0
      },
      events: {
        'onReady': onPlayerReady,
        'onStateChange': onPlayerStateChange
      }
    });
  }

  // The API will call this function when the video player is ready.
  function onPlayerReady(event) {
    player.unMute();
    socket.emit('video state', 0);
  }

  // The API calls this function when the player's state changes.
  // The function indicates that when playing a video (state=1),
  // the player should play for six seconds and then stop.
  var done = false;
  function onPlayerStateChange(event) {
    console.log("player state change:", event.data)
    if (event.data == YT.PlayerState.PAUSED) {
      event.target.playVideo(); // TODO does this violate the youtube ToS?
    }
  }


