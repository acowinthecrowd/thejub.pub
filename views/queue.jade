ul(id="queue-navtabs", class="nav nav-tabs")
  li(id="queue-navtab-li", role="presentation")
    a(id="queue-navtab-a", href="#queue-tab", data-toggle='tab')
      i(class="material-icons", data-toggle="tooltip", title="Your queue") queue_music
  li(id="playlists-navtab-li", role="presentation",
     data-toggle="tooltip", title="Playlists")
    a(id="playlists-navtab-a", href="#playlists-tab", data-toggle='tab')
      i(class="material-icons", data-toggle="tooltip", title="Playlists") library_music
  li(id="queue-settings-navtab-li", role="presentation", class="active",
     data-toggle="tooltip", title="Settings")
    a(id="queue-settings-navtab-a", href="#queue-settings-tab", data-toggle='tab')
      i(class="material-icons", data-toggle="tooltip", title="Settings") settings

div(id="queue-tab-content", class="tab-content")
  div(class="tab-pane" id="queue-tab")
    div(class='panel panel-default', id='queue-panel')
      table(class='table', id='playlist-name-banner')
        tbody
          tr
            td(id="big-playlist-name",
              style="width: 100%; text-align: left; font-size: large; margin-top: 5px; line-height:1.9;")
            td(class='right')
              div(class='input-group input-group-md')
                button(class='btn btn-default', type='button', id='shuffle',
                       data-toggle='tooltip', data-placement='top',
                       title='Shuffle')
                  span(id='shuffle-icon', class='glyphicon glyphicon-random')

      table(class='table', id='queue-banner')
        tbody
          tr
            td
              input(id='select-all', type='checkbox',
                    data-toggle='tooltip', title='Select all',
                    style='visibility:hidden')
              label(for='select-all', style='font-weight: normal; display: none;'
                    id='select-all-label') Select all
            td(class='right', id='queue-buttons')
              div(class='input-group input-group-md')
                button(class='btn btn-default right', type='button', id='delete-track',
                       data-toggle='tooltip', data-placement='top',
                       title='Delete')
                  span(id='delete-track-icon', class='glyphicon glyphicon-remove')
                button(class='btn btn-default', type='button', id='send-to-bottom',
                       data-toggle='tooltip', data-placement='top',
                       title='Send to bottom')
                  span(id='send-to-bottom-icon', class='glyphicon glyphicon-chevron-down')
                button(class='btn btn-default left', type='button', id='send-to-top',
                       data-toggle='tooltip', data-placement='top',
                       title='Send to top')
                  span(id='send-to-top-icon', class='glyphicon glyphicon-chevron-up')

      div(class='panel-body')
        div(id='video-queue')
          table
            tbody(id='video-queue-tbody')

  div(class="tab-pane" id="playlists-tab")
    div(class='panel panel-default', id='playlists-panel')
      form(class='form-inline', id='playlist-form', action='')
        table(class='table', id='playlists-banner')
          tbody
            tr
              td
                button(class='btn btn-default left', type='button', id='copy-playlist',
                       data-toggle='tooltip', data-placement='top',
                       title='Copy playlist')
                  span(id='cp-pl-icon', class='glyphicon glyphicon-copy')
                button(class='btn btn-default left', type='button', id='delete-playlist',
                       data-toggle='tooltip', data-placement='top',
                       title='Delete playlist')
                  span(id='delete-playlist-icon', class='glyphicon glyphicon-remove')

              td
                input(class='form-control right', id='playlist-name-input',
                      autocomplete='off', placeholder='Rename selected playlist')

      div(class='panel-body')
        div(id='playlists', class='jub-list')

  div(class="tab-pane active" id="queue-settings-tab")
    div(class='panel panel-default', id='queue-settings-panel')
      div(class='panel-body')
        input(id='requeue-videos', type='checkbox')
        // TODO update programmatically
        label(id='requeue-label', for='requeue-videos') Requeue "Free Play!" videos

script.

  var reservedPlLabel = 'Free Play!';
  var myQueue = [];
  var myPlaylists = [];
  var prefsSelectedPlaylist = null;


  $('[data-toggle="tab"]').tooltip({
    trigger: 'hover',
    //placement: 'top',
    animate: true,
    delay: 500,
    container: 'body'
  });

  function selectedPlaylistName() {
    return $('#playlists li input[name=playlist-radios]:checked').prop('value');
  }

  function selectedPlaylistDisplayName() {
    var value = $('#playlists li input[name=playlist-radios]:checked').prop('value');
    return (value == 'sandbox') ? reservedPlLabel : value;
  }

  function selectedPlaylist() {
    var name = selectedPlaylistName();
    if (name) {
      return _.find(myPlaylists, function(pl) { return pl.name == name });
    }
  }

  function updateBigPlaylistName() {
    $('#big-playlist-name').text(selectedPlaylistDisplayName());
  }

  function updateQueueButtons() {
    var dur = 100;
    if ($('#video-queue-tbody tr td input:checkbox:checked').length > 0) {
      $('#delete-track').fadeIn(dur);
      $('#send-to-top').fadeIn(dur);
      $('#send-to-bottom').fadeIn(dur);
    } else {
      $('#delete-track').fadeOut(dur);
      $('#send-to-top').fadeOut(dur);
      $('#send-to-bottom').fadeOut(dur);
    }
  }

  function updateSelectAll() {
    if ($('#video-queue-tbody tr td input:checkbox').length > 0) {
      $('#select-all').css('visibility', 'visible');
      $("label[for='select-all']").show();
    } else {
      $('#select-all').css('visibility', 'hidden');
      $("label[for='select-all']").hide();
    }
    $('#select-all').prop('checked', false);
    if (selectedPlaylist()) {
      $('#select-all-label').text('Select all (' + selectedPlaylist().videos.length + ')');
    }
  }

  function selectedTracks() {
    var indices = [];
    var boxes = $('#video-queue-tbody tr td input:checkbox');
    boxes.each(function(i,v) {
      if (v.checked) {
        indices.push(i);
      }
    });
    return indices;
  }

  // shift + click http://4pcbr.com/topic/grouped_checkboxes_select_with_shift__click
  function setupShiftClick() {
    var _last_selected = null;
    var checkboxes = $( "#video-queue-tbody tr td input:checkbox" );

    checkboxes.click( function( e ) {
      var ix = checkboxes.index( this );
      var checked = this.checked;
      if ( e.shiftKey && ix != _last_selected ) {
        checkboxes.slice( Math.min( _last_selected, ix ), Math.max( _last_selected, ix ) )
         .each( function() { this.checked = checked });
        _last_selected = null;
      } else { _last_selected = ix }
    });
  }

  $('#queue-navtabs a').click(function (e) {
    $(this).tab('show');
    if (e.currentTarget.id == 'queue-navtab-a') {
      $('#video-queue').trigger('redraw');
    }
  })

  // Server responds on 'preferences' channel, handled by global.js
  $('#requeue-videos').click(function (e) {
    var data = { requeueVideos: this.checked };
    socket.emit('update user preferences', getUsername(), data);
  });

  // TODO include the number of videos and the duration
  function newPlaylistLi(playlistName) {
    var li = $('<li>').addClass('playlist-item');
    var nameSpan = $('<span>').addClass('playlist-name');
    var shownName = (playlistName == 'sandbox') ? reservedPlLabel : playlistName;
    nameSpan.append(document.createTextNode(shownName));
    var radio = $('<input>').addClass('playlist-radio');
    radio.attr({
      type: 'radio',
      name: 'playlist-radios',
      value: playlistName
    });
    radio.click( function( e ) {
      var data = { selectedPlaylist: this.value };
      socket.emit('update user preferences', getUsername(), data);
    });
    li.append(radio);
    li.append(nameSpan);
    return li;
  }

  function newQueueItem(videoObj) {
    var tr = $('<tr>').addClass('queue-item');
    tr.css({
      'overflow': 'visible',
      'white-space': 'nowrap',
    });
    var titleTd = $('<td>').addClass('track');
    titleTd.css({
      'overflow': 'hidden',
      'text-overflow': 'ellipsis',
      'white-space': 'nowrap',
    });
    var timeTd = $('<td>').addClass('duration');
    var chkTd = $('<td>').addClass('chk-td');
    var chk = $('<input>').attr('type', 'checkbox').addClass('queue-chk')
    chkTd.append(chk)

    // Set initial checkbox state.
    chk.val($(this).is(':checked'));

    // The 'delete' and 'send to top' buttons only appear if a track is selected
    chk.change(updateQueueButtons);

    tr.append(chkTd)
    tr.append(titleTd);
    tr.append(timeTd);

    var tformat = (video.duration / 1000) >= 3600 ? '%k:%M:%S' : '%M:%S';
    time = new Date(1970, 1, 1); // Unix epoch
    time.setSeconds(video.duration / 1000);
    timeTd.text('(' + strftime(tformat, time).trim() + ')');

    titleTd.text(video.title);

    return tr;
  }

  // Redraw queue
  $('#video-queue').bind('redraw',function() {
    console.log('redrawing queue');
    $("#video-queue-tbody tr").remove();
    var pl = selectedPlaylist() || {};

    var videos = pl['videos'];
    videos = _.sortBy(videos, 'position').reverse();
    for (video of videos) {
      var item = newQueueItem(video);
      $("#video-queue-tbody").prepend(item);
    }

    updateSelectAll();
    setupShiftClick();
    updateBigPlaylistName();
  });

  // Redraw playlists
  $('#playlists').bind('redraw',function() {
    console.log('redrawing playlists');
    $(this).empty();
    _.chain(myPlaylists)
      .partition(function(p) { return p.name == 'sandbox'; })
      .map(function(grp) {
        return _.sortBy(grp, function(x) { return x.name.toLowerCase() });
        })
      .flatten()
      .each(function(p) { $(this).append(newPlaylistLi(p.name)); }, this)
      .value();

    var selected;
    var playlists = $('#playlists li input');
    if (prefsSelectedPlaylist) {
      selected = $(playlists).filter(function() {
        return this.value == prefsSelectedPlaylist
      });
    }
    selected = selected || playlists[0];
    $(selected).prop('checked', true)
  });

  // playlists is an object keyed by playlist name
  function updatePlaylists(playlists) {
    if (playlists) {
      console.log('updating playlists', _.cloneDeep(playlists));
      myPlaylists = _.cloneDeep(playlists);
      $('#playlists').trigger('redraw');
      $('#video-queue').trigger('redraw');
      updateSelectAll();
      updateQueueButtons();
    }
  };

  // Server tells us our list of playlists, and our selected playlist
  socket.on('playlists', function(playlists, prefsSelected) {
    if (prefsSelected) { prefsSelectedPlaylist = prefsSelected; };
    updatePlaylists(playlists);
  });

  // Rename a playlist
  $('#playlist-form').submit(function() {
    var selectedName = selectedPlaylistName();
    var newName = $('#playlist-name-input').val();
    var user = getUsername();

    if (user == '') {
      alert('You must be logged in to edit playlists.')
    } else {
      if (selectedName.length > 0 && selectedName != 'sandbox') {
        console.log('renaming playlist', newName);
        socket.emit('rename playlist', user, selectedName, newName);
        $('#playlist-name-input').val('');
      }
    }
    return false;
  });

  // Select all
  $('#select-all').on('click', function(e) {
    var that = this;
    $( "#video-queue-tbody tr td input:checkbox" )
      .each( function() { this.checked = that.checked });
    updateQueueButtons();
  });

  // Shuffle
  $('#shuffle').on('click', function(e) {
    socket.emit('shuffle', getUsername(), selectedPlaylistName());
    return false;
  });

  // Delete track(s)
  $('#delete-track').on('click', function(e) {
    socket.emit('delete tracks', getUsername(), selectedPlaylistName(),
                selectedTracks());
    return false;
  });

  // Send track(s) to top
  $('#send-to-top').on('click', function(e) {
    socket.emit('send to top', getUsername(), selectedPlaylistName(), selectedTracks());
    return false;
  });

  // Send track(s) to bottom
  $('#send-to-bottom').on('click', function(e) {
    socket.emit('send to bottom', getUsername(), selectedPlaylistName(), selectedTracks());
    return false;
  });

  // Copy playlist
  $('#copy-playlist').on('click', function(e) {
    socket.emit('copy playlist', getUsername(), selectedPlaylistName());
  });

  // Delete playlist
  $('#delete-playlist').on('click', function(e) {
    if (selectedPlaylistName() != 'sandbox') {
      socket.emit('delete playlist', getUsername(), selectedPlaylistName());
    }
  });

  $( document ).ready(function() {
    // Document is loaded so click the correct initially-active tab
    $('#queue-navtab-a').click();
    updateQueueButtons();
  });
