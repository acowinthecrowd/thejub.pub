div(id="player")
div(class='row')
  form(class='form-group', id='play_video', action='')
    div(class='col-md-1')
      label(for='video_id') Play Video
    div(class='col-md-5')
      input(class='form-control', id='video_id',
        style='margin:0 0 10px 0;')
    div(class='col-md-2')
      button(class='btn btn-default') Submit
    div(class='col-md-2')
      button(class='btn btn-default', id='mute')
        span(id='mute-icon', class='glyphicon glyphicon-volume-up',
             aria-hidden='true')
script.

  var my_video_state = {};

  // Client text box for submitting a video
  $('#mute').on('click', function(e) {
    e.preventDefault();
    console.log('mute');
    if (player.isMuted()) {
      player.unMute();
      $('#mute-icon').attr('class', 'glyphicon glyphicon-volume-up');
    }
    else {
      player.mute();
      $('#mute-icon').attr('class', 'glyphicon glyphicon-volume-off');
    }
    return false;
  });

  // Client text box for submitting a video
  $('#play_video').submit(function() {
    var video_id = $('#video_id').val();
    socket.emit('video submit', video_id);
    return false;
  });

  // Server tells us about video state changes
  socket.on('video state', function(video_state) {
    apply_video_state(video_state);
  });

  // Load the IFrame Player API code, asynchronously
  var tag = document.createElement('script');
  tag.src = "https://www.youtube.com/iframe_api";
  var firstScriptTag = document.getElementsByTagName('script')[0];
  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

  // Create an <iframe> (and YouTube player) after the API code downloads.
  var player;
  function onYouTubeIframeAPIReady() {
    player = new YT.Player('player', {
      height: '390',
      width: '640',
      playerVars: {
        'autoplay': 0,
        'autohide': 1,
        'controls': 0,
        'rel': 0,
        'disablekb': 1,
        'modestbranding': 1,
        // TODO add 'origin' param; set it to my domain
        'iv_load_policy': 0
      },
      events: {
        'onReady': onPlayerReady,
        'onStateChange': onPlayerStateChange
      }
    });
  }

  // The API will call this function when the video player is ready.
  function onPlayerReady(event) {
    player.unMute();
    socket.emit('request video state', 0);
  }

  // The API calls this function when the player's state changes.
  // The function indicates that when playing a video (state=1),
  // the player should play for six seconds and then stop.
  var done = false;
  function onPlayerStateChange(event) {
    console.log("player state change:", event.data)
    if (event.data == YT.PlayerState.PAUSED) {
      event.target.playVideo(); // TODO does this violate the youtube ToS?
    }
  }

  function apply_video_state(state) {
    id =  state['id'];
    start_time =  state['start_time'];
    if (my_video_state['id'] != id ||
        my_video_state['start_time'] != start_time) {
      my_video_state = {
        id: id,
        start_time: start_time
      };
      video_progress = (state['server_time'] - start_time) / 1000;
      console.log("apply video state", id, video_progress);
      player.loadVideoById({
        'videoId': id,
        'startSeconds': video_progress,
        'suggestedQuality': 'large'
      });
    }
  }
