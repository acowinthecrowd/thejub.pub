extends layout

block video_block
  div(id="player")
  form(class='form-group', id='play_video', action='')
    div(class='col-md-2')
      label(for='video_id') Play Video
    div(class='col-md-5')
      input(class='form-control', id='video_id',
        style='margin:0 0 10px 0;')
    div(class='col-md-2')
      button(class='btn btn-default') Submit
  script.

    var my_video_state = {};

    // Client text box for submitting a video
    $('#play_video').submit(function() {
      var video_id = $('#video_id').val();
      socket.emit('video submit', video_id);
      return false;
    });

    // Server tells us about video state changes
    socket.on('video state', function(video_state) {
      apply_video_state(video_state);
    });

    // Load the IFrame Player API code, asynchronously
    var tag = document.createElement('script');
    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    // Create an <iframe> (and YouTube player) after the API code downloads.
    var player;
    function onYouTubeIframeAPIReady() {
      //$.ajax.get('/video_state', function(state) {
        player = new YT.Player('player', {
          height: '390',
          width: '640',
         // videoId: 'ELAs5Q8Itfs',
          playerVars: { 'autoplay': 1, 'controls': 0 },
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
          }
        });
      //});
    }

    // The API will call this function when the video player is ready.
    function onPlayerReady(event) {
      socket.emit('request video state', 0);
    }

    // The API calls this function when the player's state changes.
    // The function indicates that when playing a video (state=1),
    // the player should play for six seconds and then stop.
    var done = false;
    function onPlayerStateChange(event) {
      console.log("player state change:", event.data)
      if (event.data == YT.PlayerState.PLAYING && !done) {
        //setTimeout(stopVideo, 6000);
        done = true; // TODO
      }
    }

    function apply_video_state(state) {
      // Don't store server time in client state
      client_state = {
        id: state['id'],
        start_time: state['start_time']
      };
      if (my_video_state != client_state) {
        my_video_state = client_state;
        video_id = state['id'];
        video_progress = (Date.now() - state['start_time']) / 1000;
        console.log("current time:", Date.now());
        console.log("apply video state", video_id, video_progress);
        player.loadVideoById({
          'videoId': video_id,
          'startSeconds': video_progress,
          'suggestedQuality': 'large'
        });
      }
    }

    function stopVideo() {
      player.stopVideo();
    }


