http://stackoverflow.com/questions/549/the-definitive-guide-to-form-based-website-authentication#477579
http://stackoverflow.com/questions/244882/what-is-the-best-way-to-implement-remember-me-for-a-website
http://jaspan.com/improved_persistent_login_cookie_best_practice
https://paragonie.com/blog/2015/04/secure-authentication-php-with-long-term-persistence#title.2

Authentication for the websockets
  https://devcenter.heroku.com/articles/websocket-security
  https://auth0.com/blog/auth-with-socket-io/
  http://howtonode.org/socket-io-auth


Chat -
  - curently, client sends username with chat message.
  - now, the username will just be determined based on the socket's session token.


Auth behavior, first pass
  - our room is public
  - chat is allowed only if you choose a nickname or log in
  - welcome screen (redirect here if try to access room with no nickname or auth)
  - Login should redirect to the room afterward
  - not allowed without auth:
    - DJing
      - Don't show the search bar
      - Don't show the 'click to dj' button
      - (show a message in the queue panel)
    - skip
  - auto log out after... 3 days?
  - remember me
    - what exactly does this do?
    - means that you can close the browser and stay logged in?
  - user can reset password
  - don't require logging in every day
    - I guess this means reissuing a token when the expiration gets close
    - if the browser stays open, let it keep refreshing its token (once a day would be fine)



Do next:
  - SERVER
    - make sure the new paths are routed to nodejs from nginx
    - make sure blacklist still works
  - UI
    - Add automatic delayed redirect to signup-confirm
  - Functional testing

Do later:
  - periodically, server should force client to refresh websocket connection
    - without this, TCP connection could stay open forever, even after token is expired
    - but, each action is gated by a socket session check in socket-routing, so
      users can't actually write anything, only read, and the first time they try
      to write, the browser will reload
  - periodically, server sends a new session token for people who want to leave their browser open
  - set 'secure' flag on sessionToken and configure nginx to modify the cookie on requests
  - nicknames for account users
  - room admin page
  - independent auth micro-service
  - consider storing token for use in every request so that websocket connections can't be hijacked?
    - it could then not be HttpOnly...
  - throttling/limiting for login and reset password
